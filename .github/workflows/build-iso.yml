name: Build and Release Blueprint ISO

on:
  schedule:
    - cron: "0 0 1 * *" # Monthly on the 1st at midnight UTC
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: true
        type: boolean

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: blueprint
  GPG_KEY_ID: 6DC148442BFDACB80177112A7B7A4A74FF1AEDBC

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-iso:
    name: Build Blueprint ISO
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    outputs:
      iso_name: ${{ steps.rename.outputs.iso_name }}
      checksum_name: ${{ steps.rename.outputs.checksum_name }}
      timestamp: ${{ steps.date.outputs.timestamp }}
      version_tag: ${{ steps.date.outputs.version_tag }}
      iso_size: ${{ steps.rename.outputs.iso_size }}
      iso_size_mb: ${{ steps.rename.outputs.iso_size_mb }}
      exceeds_limit: ${{ steps.rename.outputs.exceeds_limit }}
      r2_url: ${{ steps.r2_upload.outputs.r2_url }}
      output_directory: ${{ steps.rename.outputs.output_directory }}
      
    steps:
      - name: Maximize build space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone gnupg

      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false
          
      - name: Set Build Date
        id: date
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          VERSION_TAG="v${TIMESTAMP}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Build ISO
        uses: jasonn3/build-container-installer@v1.3.0
        id: build
        with:
          arch: x86_64
          version: 42
          image_repo: ${{ env.IMAGE_REGISTRY }}
          image_name: ${{ env.IMAGE_NAME }}
          image_tag: latest
          variant: 'Sericea'
          iso_name: ${{ env.IMAGE_NAME }}.iso
          enable_cache_dnf: "false"
          enable_cache_skopeo: "false"
          enable_flatpak_dependencies: "false"

      - name: Rename ISO, sign and validate CHECKSUM
        id: rename
        shell: bash
        env:
          ISO_SIGNING_KEY: ${{ secrets.ISO_SIGNING_KEY }}
        run: |
          # Take ownership of built files
          sudo chown $(whoami) "${{ env.IMAGE_NAME }}.iso" "${{ env.IMAGE_NAME }}.iso-CHECKSUM"
          
          # Create output directory
          TARGET_OUTPUT_DIRECTORY="$(pwd)/output"
          mkdir -p "${TARGET_OUTPUT_DIRECTORY}"
          
          # Generate final names with timestamp
          PREFIX="blueprint"
          DATE_SUFFIX="${{ env.TIMESTAMP }}"
          ISO_NAME="${PREFIX}-${DATE_SUFFIX}.iso"
          CHECKSUM_NAME="${ISO_NAME}-CHECKSUM"
          
          # Rename files
          mv "${{ env.IMAGE_NAME }}.iso" "${ISO_NAME}"
          mv "${{ env.IMAGE_NAME }}.iso-CHECKSUM" "${CHECKSUM_NAME}"
          
          # Get file info
          ISO_SIZE=$(stat -c %s "${ISO_NAME}")
          ISO_SIZE_MB=$((ISO_SIZE / 1024 / 1024))
          HASH=$(sha256sum "${ISO_NAME}" | cut -d ' ' -f1)
          
          # Check if exceeds GitHub limit
          GITHUB_LIMIT=2147483648
          if [ ${ISO_SIZE} -gt ${GITHUB_LIMIT} ]; then
            EXCEEDS_LIMIT="true"
            echo "⚠️ ISO size (${ISO_SIZE_MB} MB) exceeds GitHub's 2GB release limit"
          else
            EXCEEDS_LIMIT="false"
            echo "✅ ISO size (${ISO_SIZE_MB} MB) is within GitHub's 2GB release limit"
          fi
          
          # Create properly formatted checksum file
          {
            echo "# ${ISO_NAME}: ${ISO_SIZE} bytes (${ISO_SIZE_MB} MB)"
            echo "# Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            echo "# Version: ${{ env.VERSION_TAG }}"
            echo "# Registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo ""
            echo "SHA256 (${ISO_NAME}) = ${HASH}"
          } > "${CHECKSUM_NAME}"
          
          echo "CHECKSUM file contents:"
          cat "${CHECKSUM_NAME}"
          echo ""
          
          # Import signing key
          echo "${ISO_SIGNING_KEY}" | gpg --import
          
          # Sign the checksum file
          echo "Signing the CHECKSUM file..."
          gpg --clearsign -u ${{ env.GPG_KEY_ID }} "${CHECKSUM_NAME}"
          mv "${CHECKSUM_NAME}.asc" "${CHECKSUM_NAME}"
          
          echo "Signed CHECKSUM contents:"
          cat "${CHECKSUM_NAME}"
          echo ""
          
          # Validate signature using the public key from repo
          echo "Validating signature..."
          gpg --no-default-keyring --keyring ./blueprint-keyring.gpg --import .github/keys/blueprint-public.gpg
          
          if ! gpgv --keyring ./blueprint-keyring.gpg "${CHECKSUM_NAME}"; then
              echo "❌ CHECKSUM signature verification FAILED! Exiting..."
              exit 1
          fi
          echo "✅ Signature verification passed"
          
          # Validate ISO checksum
          echo "Validating ISO checksum..."
          if ! sha256sum --ignore-missing -c "${CHECKSUM_NAME}"; then
              echo "❌ CHECKSUM verification FAILED! Exiting..."
              exit 1
          fi
          echo "✅ Checksum verification passed"
          
          # Clean up temporary keyring
          rm -f ./blueprint-keyring.gpg ./blueprint-keyring.gpg~
          
          # Move files to output directory
          mv "${ISO_NAME}" "${TARGET_OUTPUT_DIRECTORY}/"
          mv "${CHECKSUM_NAME}" "${TARGET_OUTPUT_DIRECTORY}/"
          
          # Create a simple .sha256 file for convenience
          cd "${TARGET_OUTPUT_DIRECTORY}"
          echo "${HASH}  ${ISO_NAME}" > "${ISO_NAME}.sha256"
          
          # Set outputs
          echo "iso_name=${ISO_NAME}" >> $GITHUB_OUTPUT
          echo "checksum_name=${CHECKSUM_NAME}" >> $GITHUB_OUTPUT
          echo "iso_size=${ISO_SIZE}" >> $GITHUB_OUTPUT
          echo "iso_size_mb=${ISO_SIZE_MB}" >> $GITHUB_OUTPUT
          echo "exceeds_limit=${EXCEEDS_LIMIT}" >> $GITHUB_OUTPUT
          echo "output_directory=${TARGET_OUTPUT_DIRECTORY}" >> $GITHUB_OUTPUT
          
          echo "Files ready for upload:"
          ls -lah "${TARGET_OUTPUT_DIRECTORY}/"

      - name: Upload ISO to Cloudflare R2
        id: r2_upload
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          OUTPUT_DIRECTORY: ${{ steps.rename.outputs.output_directory }}
        run: |
          echo "📤 Uploading ISO and checksums to Cloudflare R2..."
          
          # Upload all files from output directory
          rclone copy "${OUTPUT_DIRECTORY}" R2:blueprint-isos --progress
          
          # Generate R2 public URL
          R2_BASE_URL="${{ secrets.R2_PUBLIC_URL }}"
          R2_ISO_URL="${R2_BASE_URL}/${{ steps.rename.outputs.iso_name }}"
          
          echo "r2_url=${R2_ISO_URL}" >> $GITHUB_OUTPUT
          echo "✅ Upload complete!"
          echo "🔗 ISO available at: ${R2_ISO_URL}"

      - name: Upload ISO Artifacts (Backup)
        uses: actions/upload-artifact@v5
        with:
          name: blueprint-iso-${{ env.TIMESTAMP }}
          path: ${{ steps.rename.outputs.output_directory }}
          if-no-files-found: error
          retention-days: 30
          compression-level: 0

  generate-changelog:
    name: Generate Changelog
    needs: [build-iso]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changelog_file: ${{ steps.changelog.outputs.file }}
      release_title: ${{ steps.changelog.outputs.title }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get Previous Tag
        id: prev_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, using initial commit"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "previous_tag=${PREV_TAG}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        env:
          TIMESTAMP: ${{ needs.build-iso.outputs.timestamp }}
          VERSION_TAG: ${{ needs.build-iso.outputs.version_tag }}
          ISO_NAME: ${{ needs.build-iso.outputs.iso_name }}
          ISO_SIZE_MB: ${{ needs.build-iso.outputs.iso_size_mb }}
          EXCEEDS_LIMIT: ${{ needs.build-iso.outputs.exceeds_limit }}
          R2_URL: ${{ needs.build-iso.outputs.r2_url }}
        run: |
          CHANGELOG_FILE="CHANGELOG-${TIMESTAMP}.md"
          
          cat > "${CHANGELOG_FILE}" << EOF
          # Blueprint Linux ISO Release - ${VERSION_TAG}
          
          **Release Date:** $(date -u +"%Y-%m-%d")
          **Base Image:** Fedora Sericea 42
          **Container:** \`${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`
          **ISO Size:** ${ISO_SIZE_MB} MB
          
          ## 📦 Downloads
          
          ### Primary Download (Cloudflare R2)
          - **ISO:** [${ISO_NAME}](${R2_URL})
          - **Signed Checksum:** [${ISO_NAME}-CHECKSUM](${R2_URL%/*}/${ISO_NAME}-CHECKSUM)
          - **SHA256:** [${ISO_NAME}.sha256](${R2_URL%/*}/${ISO_NAME}.sha256)
          
          EOF
          
          if [ "${EXCEEDS_LIMIT}" = "true" ]; then
            cat >> "${CHANGELOG_FILE}" << 'EOF'
          > **Note:** This ISO exceeds GitHub's 2GB release asset limit and is hosted on Cloudflare R2.
          
          EOF
          fi
          
          cat >> "${CHANGELOG_FILE}" << 'EOF'
          ### Verification
          
          **Verify the ISO authenticity and integrity:**
          
          ```bash
          # Download the public GPG key (one-time setup)
          curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/.github/keys/blueprint-public.gpg
          gpg --import blueprint-public.gpg
          
          # Download ISO and signed checksum
          curl -O ${R2_URL}
          curl -O ${R2_URL%/*}/${ISO_NAME}-CHECKSUM
          
          # Verify GPG signature
          gpg --verify ${ISO_NAME}-CHECKSUM
          
          # Verify ISO checksum
          sha256sum --ignore-missing -c ${ISO_NAME}-CHECKSUM
          ```
          
          If both checks pass ✅, your ISO is authentic and untampered!
          
          ### Alternative Download (GitHub Artifacts)
          If R2 is unavailable, download from [GitHub Actions artifacts](../../actions/workflows/build-iso.yml).
          
          EOF
          
          cat >> "${CHANGELOG_FILE}" << EOF
          ## 🚀 What's New
          
          EOF
          
          echo "### Commits since ${{ steps.prev_tag.outputs.previous_tag }}" >> "${CHANGELOG_FILE}"
          echo "" >> "${CHANGELOG_FILE}"
          
          if git log ${{ steps.prev_tag.outputs.previous_tag }}..HEAD --oneline > /dev/null 2>&1; then
            git log ${{ steps.prev_tag.outputs.previous_tag }}..HEAD --pretty=format:"- %s (%h)" >> "${CHANGELOG_FILE}"
          else
            echo "- Initial release" >> "${CHANGELOG_FILE}"
          fi
          
          echo "" >> "${CHANGELOG_FILE}"
          echo "" >> "${CHANGELOG_FILE}"
          
          cat >> "${CHANGELOG_FILE}" << 'EOF'
          ## 📋 Installation
          
          ### From ISO
          1. Download the ISO and checksum from the R2 links above
          2. Verify authenticity using GPG (see Verification section)
          3. Write to USB: `dd if=blueprint-*.iso of=/dev/sdX bs=4M status=progress`
          4. Boot from USB and install
          
          ### Rebase Existing System
          ```bash
          # First rebase to unsigned image
          sudo rpm-ostree rebase ostree-unverified-registry:${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          systemctl reboot
          
          # Then rebase to signed image
          sudo rpm-ostree rebase ostree-image-signed:docker://${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          systemctl reboot
          ```
          
          ## 📚 Documentation
          
          For more information, see the [README](https://github.com/${{ github.repository }})
          
          ---
          *Automated build from commit ${{ github.sha }}*
          EOF
          
          echo "file=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT
          echo "title=Blueprint Linux ISO - ${VERSION_TAG}" >> $GITHUB_OUTPUT

      - name: Upload Changelog
        uses: actions/upload-artifact@v5
        with:
          name: changelog-${{ needs.build-iso.outputs.timestamp }}
          path: ${{ steps.changelog.outputs.file }}
          retention-days: 7

  create-release:
    name: Create GitHub Release
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
    needs: [build-iso, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download ISO Artifact
        uses: actions/download-artifact@v5
        with:
          name: blueprint-iso-${{ needs.build-iso.outputs.timestamp }}
          path: ./release-assets

      - name: Download Changelog
        uses: actions/download-artifact@v5
        with:
          name: changelog-${{ needs.build-iso.outputs.timestamp }}
          path: ./

      - name: Prepare Release Assets
        id: prepare_assets
        run: |
          # Only include checksum files in GitHub release
          # ISO is hosted on R2 (may exceed 2GB limit)
          mkdir -p ./release-assets-filtered
          
          # Copy checksum files only
          find ./release-assets -type f \( -name "*-CHECKSUM" -o -name "*.sha256" \) -exec cp {} ./release-assets-filtered/ \;
          
          # If ISO is small enough, include it too
          if [ "${{ needs.build-iso.outputs.exceeds_limit }}" = "false" ]; then
            echo "ISO is under 2GB, including in release"
            find ./release-assets -type f -name "*.iso" -exec cp {} ./release-assets-filtered/ \;
          else
            echo "ISO exceeds 2GB, excluding from release (available on R2)"
          fi
          
          echo "assets_dir=./release-assets-filtered" >> $GITHUB_OUTPUT

      - name: List Release Assets
        run: |
          echo "Release assets:"
          ls -lah ${{ steps.prepare_assets.outputs.assets_dir }}/
          echo ""
          echo "Changelog:"
          ls -lah ./*.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-iso.outputs.version_tag }}
          name: ${{ needs.generate-changelog.outputs.release_title }}
          body_path: ./CHANGELOG-${{ needs.build-iso.outputs.timestamp }}.md
          draft: false
          prerelease: false
          make_latest: true
          files: |
            ${{ steps.prepare_assets.outputs.assets_dir }}/*
          fail_on_unmatched_files: false
          generate_release_notes: false

      - name: Clean up old releases
        if: github.event_name == 'schedule'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Keep only the last 3 releases
          gh release list --limit 100 --json tagName,createdAt | \
            jq -r '.[3:] | .[].tagName' | \
            xargs -I {} gh release delete {} --yes --cleanup-tag || true

  summary:
    name: Build Summary
    if: always()
    needs: [build-iso, create-release]
    runs-on: ubuntu-latest
    permissions:
      actions: read
      
    steps:
      - name: Create Summary
        run: |
          echo "## 📊 Blueprint ISO Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-iso.result }}" == "success" ]]; then
            echo "✅ **ISO Build:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "- ISO Name: \`${{ needs.build-iso.outputs.iso_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${{ needs.build-iso.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Size: ${{ needs.build-iso.outputs.iso_size_mb }} MB" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **GPG Signature:** Verified" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Checksum:** Validated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📤 **Cloudflare R2 Upload:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "- Download URL: ${{ needs.build-iso.outputs.r2_url }}" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.build-iso.outputs.exceeds_limit }}" == "true" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ **Note:** ISO exceeds GitHub's 2GB limit, hosted on R2 only" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **ISO Build:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ **Release Creation:** Successful" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.build-iso.outputs.version_tag }})" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.create-release.result }}" == "skipped" ]]; then
            echo "⏭️ **Release Creation:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Creation:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered By:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
